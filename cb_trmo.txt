# TABLE OF CONTENTS:
#
# SECTION A: Crawl options.
#            Self explanatory.
#
# SECTION B: Global varaibles.
#
# SECTION C: Strategy functions.
#            These fucntions implement specific strategies, such as:
#            Quaff ID a potion. Travel to the lair. Rest. Progress.
#            More general strategies might call on more specific strategies
#            acording to the strategy tables.
#
#            These tables govern which strategies have priority over which
#            other strategies. For instance you would rather berserk than
#            attack. However if there's no reason to beserk (because the
#            situation doesn't pose enough of a threat) or if you can't go
#            berserk for some reason, then attacking normally will be your
#            fall back plan.
#
#            If you're like to change the route (orc before lair for instance)
#            or some other simplistic strategy change, then you may be able to
#            do it here without having to be much of a programmer.
#
# SECTION D: Main functions.
#            These functions include "hit_closest()" which is called when you
#            press TAB. As well as "ready()" which is called when Crawl is
#            ready to accept user input. In addition the heartbeat function
#            "cb_main()" is included. These functions drive the bot, and are
#            the entry points to everything else, so if you're curious how cb
#            works, then this is the place you want to start reading.
#
# SECTION E: Autopickup functions.
#            These functions control cb's dynamic autopickup functionality.
#            There is the "autopickup()" entry point as well as related
#            functions needed for item prioritization.
#
# SECTION F: Utility functions.
#            These functions are called by all the above functions. They
#            include general stuff used everywhere like "say(message)" which
#            is called all over the place for feedback and debugging. As well
#            as some functions that may only be used by one or two strategies.

#############
# SECTION A #
#############

view_delay = 0
use_animations =
clear_messages = true
travel_delay = -1
explore_delay = -1
travel_key_stop = false
default_manual_training = true
auto_exclude =
hp_warning = 0
show_more = false
show_newturn_mark = false
force_more_message =
show_travel_trail = false
skill_focus = false
flush.failure = false
char_set = default
use_fake_player_cursor = true
equip_unequip = true

dump_order = header,hiscore,stats,misc,mutations,skills,spells,inventory
dump_order += overview
dump_order += messages,screenshot,monlist,kills,notes,vaults,action_counts
note_hp_percent = 25
note_skill_levels = 1,3,6,9,12,15,18,21,24,27

# TODO: This section needs some serious work.
fire_order = launcher, rock, javelin, tomahawk

explore_stop =

message_colour ^= mute:Unknown command

# Lua begins here.

{
---------------
-- Section B --
---------------
-- Default radius of vision in crawl.
local LOS = 7 -- Don't change.

-- The maximum number of floors a shaft can drop you
local max_shaft_depth = 3

-- I wish there was a way to have this persist when saving and reloading a game.
-- However there isn't any way to do that that I know of. This can lead to some
-- potentially odd behavior, where making assumptions may be important. Variables
-- that control these assumptions are below.
local last_explored_level = -1 -- Don't change.

-- When loading a saved game, we have no way of knowing for sure if we've been
-- "shafted" or not. If set to true we assume we have been, and go up three levels
-- before working our way down.
local attempt_unshaft_on_start = false

---------------
-- SECTION C --
---------------

function win()
  local win_strategy = {
    rest,
    relax,
    escape,
    explore,
    progress,
    fight,
    emergency}

  -- Look before taking action.
  update_monster_array()

  local n = 1
  local success = false
  while not success do
    if not win_strategy[n] then
      -- We've reached the end of the strategy table.
      -- This means we've failed.
      say("ERROR: CB failed to implement any of the strategies in the main table.")
      say("ERROR: CB is out of ideas and is returning control to the user.")
      return false
    end
    success = win_strategy[n]()
    n = n + 1
  end
end

function do_rest()
  do_it("5")
end

function rest()
  -- Reasons not to rest.
  if danger() then
    return false
  end

  -- Reasons to rest.
  local hp,mhp = you.hp()
  local mp,mmp = you.mp()
  if hp < mhp or mp < mmp then
    do_rest()
    return true
  end

  return false
end

function relax()
  local relax_strategy = {
    eat_chunk,
    butcher_corpse,
    find_nearby_corpse,
    eat_permafood}

  -- Reasons not to relax.
  if danger() then
    return false
  end

  local n = 1
  local success = false
  while not success do
    if not relax_strategy[n] then
      return false
    end
    success = relax_strategy[n]()
    n = n + 1
  end
  return success
end

function do_eat_chunk()
  do_it("ee")
end

function eat_chunk()
  if have_chunk() and can_eat_chunk() then
    do_eat_chunk()
    return true
  end
  return false
end

function butcher_corpse()
  local corpse_count = 0
  for item in at_feet() do
    -- We can't use item.class because skeletons have class corpse.
    -- It's really fucking dumb.
    if string.find(item.name(), "corpse") then
      corpse_count = corpse_count + 1
    end
  end

  if corpse_count == 1 then
    do_it("c")
    return true
  elseif corpse_count > 1 then
    do_it("ccq")
    return true
  end
  return false
end

function find_nearby_corpse()
  -- We just butcher everything indiscriminately because it's simple.
  -- The final ESC is needed because it makes sure ready() is called again???
  return try_it(control('f') .. "corpse&&!!skel&&" .. you.where() .. "\ra\r" .. string.char(27))
end

function do_eat_permafood()
  for item in inventory() do
    if item.class(true) == "food" and
       food.edible(item) and
       not food.ischunk(item) then
      say("NOTICE: Eating permafood: " .. item.name())
      items.swap_slots(item.slot, items.letter_to_index("e"), false)
      do_it("ee")
      return
    end
  end
end

function eat_permafood()
  if have_permafood() and need_to_eat() then
    do_eat_permafood()
    return true
  end
  return false
end

-- Normally you want to explore the level completely before progressing. Escape is for
-- situations where that's not a good idea, and it's better to prioritize hitting a staircase.
-- Being shafted is the earliest example of such a situation. Later in the game escaping the
-- abyss and the orb run are also situations where leisurely exploring is not advised.
function escape()
  local escape_strategy = {
    ascend_with_orb,
    depart_abyss,
    unshaft}

  local n = 1
  local success = false
  while not success do
    if not escape_strategy[n] then
      return false
    end
    success = escape_strategy[n]()
    n = n + 1
  end
  return success
end

function ascend_with_orb()
  return false
end

function depart_abyss()
  return false
end

function unshaft()
  branch, level = whereami()

  if danger() then
    return false
  end

  if last_explored_level == -1 and not attempt_unshaft_on_start then
    -- We make the assumpion that the previous level was the last explored one.
    -- This means we're not shafted of course.
    last_explored_level = level - 1
    return false
  end

  if last_explored_level == -1 and attempt_unshaft_on_start then
    -- We make the assumption that we were 3 floors up before we were shafted.
    last_explored_level = level - max_shaft_depth - 1

    -- A value of 0 means that no levels have been explored, so we will travel to branch:1.
    if last_explored_level < 0 then
      last_explored_level = 0
    end
  end

  if level - 1 > last_explored_level then
     -- The final ESC is needed because it makes sure ready() is called again???
     return try_it("G<" .. string.char(27))
  end
end

function explore()
  if danger() then
    return false
  end

  -- One ESC key is needed to exit out of shops.
  -- The second ESC is needed because it makes sure ready() is called again???
  return try_it("o" .. string.char(27) .. string.char(27))
end

function progress()
  -- All progress strategies have a "success" flag.
  -- This is so that they're no longer attempted once completed.
  local progress_strategy = {
    find_temple,
    travel_to_temple,
    worship_vehumet}

  -- Reasons not to progress.
  if danger() then
    return false
  end

  local n = 1
  local success = false
  while not success do
    if not progress_strategy[n] then
      return false
    end
    success = progress_strategy[n]()
    n = n + 1
  end
  return success
end

find_temple_success = false
function find_temple()
  branch, level = whereami()

  if find_temple_success then
    return false
  elseif temple_located() then
    find_temple_success = true
    -- We return false because we didn't actually take any action.
    return false
  elseif branch == "D" and level < 7 then
    -- The final ESC is needed because it makes sure ready() is called again???
    last_explored_level = level
    do_it("G>" .. string.char(27))
    return true
  end

  say("ERROR: We're unable to find the temple for some reason!")
  return false
end

function travel_to_temple()
  return false
end

function worship_vehumet()
  return false
end

function fight()
  local fight_strategy = {
    whack,
    wait}

  -- Nothing to fight...
  if not danger() then
    return false
  end

  -- I don't know how to fight invisible monsters.
  if not options.autopick_on then
    say("I don't know how to fight invisible monsters.")
    return false
  end


  -- Look around.
  local m
  for x = -LOS,LOS do
    for y = -LOS,LOS do
      m = monster_array[x][y]
      if m then
        if m:has_known_ranged_attack() then
          say("I don't know how to fight " .. m:name() .. ", because they have a ranged attack.")
          return false
        elseif m:threat() > 2 then
          -- Harmless: 0
          -- Easy: 1
          -- Dangerous: 2
          -- Extremely dangerous: 3
          say("I don't know how to fight " .. m:name() .. ", because they're extremely dangerous.")
          return false
        elseif m:reach_range() > 1 then
          say("I don't know how to fight " .. m:name() .. ", because they have a reaching attack.")
          return false
        end
      end
    end
  end

  local n = 1
  local success = false
  while not success do
    if not fight_strategy[n] then
      say("ERROR: Unable to fight for some reason.")
      return false
    end
    success = fight_strategy[n]()
    n = n + 1
  end
  return success
end

function whack()
  for x = -1, 1 do
    for y = -1, 1 do
      if monster_array[x][y] then
         do_it(dtovi(x, y))
         return true
      end
    end
  end

  return false
end

function wait()
  do_it("s")
  return true
end

function emergency()
  -- These three situations are hardcoded to block autoexplore.
  -- "You need to eat something NOW!"
  -- "Calm down first, please."
  -- "No exploration algorithm can help you here."
  -- Because of that we need to solve them in order to keep playing
  -- the game in a sensible fashion.

  local emergency_strategy = {
    emergency_starvation,
    emergency_berserk,
    emergency_labyrinth}

  -- We're not going to actually implement this ever because it's
  -- fucking stupid as hell. The resting segment will rest off
  -- berserking. The relaxing segment will eat. As for labyrinths
  -- I have no fucking clue how you got in a labyrinth lmao.
  -- Still keeping this around as a reminder just in case.
  return false
end

---------------
-- SECTION D --
---------------

local current_turn

-- cb takes action, spending one or more turns.
-- Hopefully this brings us closer to victory!


local cb = coroutine.create(win)

-- hit_closest is run when you press tab.
local first_time = true

function hit_closest()
  if(not first_time) then
    if(coroutine.status(cb) == "dead") then
      cb = coroutine.create(win)
      coroutine.resume(cb)
    end
  else
    coroutine.resume(cb)
    first_time = false
  end
end

-- ready is run when crawl is ready for user input.
function ready()
  current_turn = you.turns()
  if(not first_time and coroutine.status(cb) == "suspended") then
    coroutine.resume(cb)
  end
end

-- choose_stat_gain is run on level ups that cause stat gain.
function choose_stat_gain()
  return "s"
end

---------------
-- SECTION E --
---------------

function autopickup(item, name)
  local c = item.class(true)
  if c == "food" and food.edible(item) then
    return true
  end
  return false
end
clear_autopickup_funcs()
add_autopickup_func(autopickup)

---------------
-- SECTION F --
---------------

function do_it(command)
  local old_turn = you.turns()
  crawl.process_keys(command)
  -- We yield, waiting for us to be ready to accept input again.
  -- When we're ready again, the current_turn may be different.
  coroutine.yield()
  if(current_turn == old_turn) then
    say("ERROR: The action " .. string.format("%q", command) .. " failed unexpectedly.")
  end
end

function try_it(command)
  local old_turn = you.turns()
  crawl.process_keys(command)
  -- We yield, waiting for us to be ready to accept input again.
  -- When we're ready again, the current_turn may be different.
  coroutine.yield()
  if(current_turn == old_turn) then
    return false
  end
  return true
end

function say(x)
  crawl.mpr(x)
  --crawl.take_note(x)
end

function control(c)
  return string.char(string.byte(c) - string.byte('a') + 1)
end

function initialize_monster_array()
  if not monster_array_init then
    monster_array = {}
    local x
    for x = -LOS,LOS do
      monster_array[x] = {}
    end
    monster_array_init = true
  end
end

function update_monster_array()
  initialize_monster_array()

  local x,y
  for x = -LOS,LOS do
    for y = -LOS,LOS do
      monster_array[x][y] = monster.get_monster_at(x, y)
    end
  end
end

function danger()
  if not options.autopick_on then
    return true
  end

  local danger = false
  for x = -LOS,LOS do
    for y = -LOS,LOS do
      local m = monster_array[x][y]
      if m and not m:is_safe() then
        danger = true
      end
    end
  end

  return danger
end

function dtovi(x, y)
  local d2v = {[-1] = { [-1] = 'y', [0] = 'k', [1] = 'u'},
               [0]  = { [-1] = 'h',            [1] = 'l'},
               [1]  = { [-1] = 'b', [0] = 'j', [1] = 'n'}}

  return d2v[y][x]
end

function inventory()
  return iter.invent_iterator:new(items.inventory())
end

function at_feet()
  return iter.invent_iterator:new(you.floor_items())
end

function have_permafood()
  for item in inventory() do
    if item.class(true) == "food" and
       food.edible(item) and
       not food.ischunk(item) then
      return true
    end
  end
  return false
end

function have_chunk()
  for item in inventory() do
    if item.class(true) == "food" and
       food.edible(item) and
       food.ischunk(item) then
      return true
    end
  end

  -- Also check the floor.
  for item in at_feet() do
    if item.class(true) == "food" and
       food.edible(item) and
       food.ischunk(item) then
      return true
    end
  end
  return false
end

function can_eat_chunk()
  if you.hunger() < 4 then
    return true
  elseif you.hunger() < 7 and you.gourmand() then
    return true
  end

  return false
end

function need_to_eat()
  -- Triggers if you're "very hungry" or hungrier.
  if you.hunger() < 3 then
    return true
  end
  return false
end

function temple_located()
  return false
end

function whereami()
  local branch
  local level
  branch, level = you.where():match("([a-zA-Z]+):([0-9]+)")
  level = tonumber(level)
  if not level then
    branch = you.where()
    level = 1
  end
  return branch, level
end
}
