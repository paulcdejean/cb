# TABLE OF CONTENTS:
#
# SECTION A: Crawl options.
#            Self explanatory.
#
# SECTION B: Strategy functions.
#            These fucntions implement specific strategies, such as:
#            Quaff ID a potion. Travel to the lair. Rest. Progress.
#            More general strategies might call on more specific strategies
#            acording to the strategy tables.
#
#            These tables govern which strategies have priority over which
#            other strategies. For instance you would rather berserk than
#            attack. However if there's no reason to beserk (because the
#            situation doesn't pose enough of a threat) or if you can't go
#            berserk for some reason, then attacking normally will be your
#            fall back plan.
#
#            If you're like to change the route (orc before lair for instance)
#            or some other simplistic strategy change, then you may be able to
#            do it here without having to be much of a programmer.
#
# SECTION C: Main functions.
#            These functions include "hit_closest()" which is called when you
#            press TAB. As well as "ready()" which is called when Crawl is
#            ready to accept user input. In addition the heartbeat function
#            "cb_main()" is included. These functions drive the bot, and are
#            the entry points to everything else, so if you're curious how cb
#            works, then this is the place you want to start reading.
#
# SECTION D: Autopickup functions.
#            These functions control cb's dynamic autopickup functionality.
#            There is the "autopickup()" entry point as well as related
#            functions needed for item prioritization.
#
# SECTION E: Utility functions.
#            These functions are called by all the above functions. They
#            include general stuff used everywhere like "say(message)" which
#            is called all over the place for feedback and debugging. As well
#            as some functions that may only be used by one or two strategies.

#############
# SECTION A #
#############

view_delay = 0
use_animations =
clear_messages = true
travel_delay = -1
explore_delay = -1
travel_key_stop = false
default_manual_training = true
autopickup_no_burden = false
auto_exclude =
hp_warning = 0
show_more = false
show_newturn_mark = false
list_rotten = false
force_more_message =
show_travel_trail = false
skill_focus = false
autoinscribe += slay:mikee
flush.failure = false
char_set = ascii
cset = cloud:xa4
cset = item_orb:0
use_fake_player_cursor = true
equip_unequip = true

dump_order = header,hiscore,stats,misc,mutations,skills,spells,inventory
dump_order += overview
dump_order += messages,screenshot,monlist,kills,notes,vaults,action_counts
ood_interesting = 6
note_hp_percent = 25
note_skill_levels = 1,3,6,9,12,15,18,21,24,27
note_all_spells = true

# TBD...
fire_order = launcher, rock, javelin, tomahawk

####################################
# not sure exactly how important or correct these settings are

explore_stop =
explore_stop += items,branches,portals,stairs,altars
explore_stop += greedy_visited_item_stack,greedy_pickup_smart

stop := runrest_stop_message
ignore := runrest_ignore_message
stop =
ignore =
ignore += .*

runrest_ignore_poison = 3:15
runrest_ignore_monster += butterfly:1
runrest_ignore_monster += orb of destruction:1

####################################
# These keys are useful to answer prompts and aren't critical for manual play

bindkey = [Y] CMD_NO_CMD_DEFAULT
bindkey = [N] CMD_NO_CMD_DEFAULT
bindkey = [B] CMD_NO_CMD_DEFAULT
bindkey = [.] CMD_NO_CMD_DEFAULT

####################################
# Don't get interrupted!
: chk_interrupt_activity["blurry vision"] = function (iname, cause, extra)
:   return nil
: end

####################################
# autopickup/drop_filter stuff, just used for scrolls/potions/wands

autopickup = ?!/

ae := autopickup_exceptions
df := drop_filter
ae =
df =
# keep: identify,teleportation,remove curse,enchant weapon,
#       enchant armour,acquirement,recharging,holy word
ae += scrolls? of (summoning|vulnerability|brand weapon)
ae += scrolls? of (magic mapping|fog|fear|silence)
ae += scrolls? of (blinking|amnesia)
ae += scrolls? of (curse armour|curse jewellery|curse weapon)
ae += scrolls? of (immolation|noise|random uselessness|torment)
df += scrolls? of (summoning|vulnerability|brand weapon)
df += scrolls? of (magic mapping|fog|fear|silence)
df += scrolls? of (blinking|amnesia)
df += scrolls? of (curse armour|curse jewellery|curse weapon)
df += scrolls? of (immolation|noise|random uselessness|torment)
# keep: curing,heal wounds,haste,cancellation,resistance,experience,
#       might,beneficial mutation,cure mutation,restore abilities
ae += potions? of (brilliance|magic|berserk rage)
ae += potions? of (flight|invisibility|agility)
ae += potions? of (ambrosia|decay|degeneration|mutation)
ae += potions? of (poison|lignification)
df += potions? of (brilliance|magic|berserk rage)
df += potions? of (flight|invisibility|agility)
df += potions? of (ambrosia|decay|degeneration|mutation)
df += potions? of (poison|lignification)
: if you.race() ~= "Vampire" then
ae += potions? of blood
df += potions? of blood
: end
# keep: heal wounds,hasting,teleportation
ae += wand of (random effects|slowing|magic darts|flame|frost|confusion)
ae += wand of (enslavement|paralysis|invisibility|lightning|fireball)
ae += wand of (cold|digging|disintegration|draining|fire|polymorph)
df += wand of (random effects|slowing|magic darts|flame|frost|confusion)
df += wand of (enslavement|paralysis|invisibility|lightning|fireball)
df += wand of (cold|digging|disintegration|draining|fire|polymorph)

################################################################
# now the lua

{

---------------
-- SECTION B --
---------------

function win()
  local win_strategy = {
    rest,
    relax,
    explore,
    progress,
    fight,
    emergency}

  -- Look before taking action.
  update_monster_array()

  local n = 1
  local success = false
  while not success do
    if not win_strategy[n] then
      -- We've reached the end of the strategy table.
      -- This means we've failed.
      say("ERROR: CB failed to implement any of the strategies in the main table.")
      say("ERROR: CB is out of ideas and is returning control to the user.")
      return false
    end
    success = win_strategy[n]()
    n = n + 1
  end
end

function do_rest()
  do_it("5")
end

function rest()
  -- Reasons not to rest.
  if danger() then
    return false
  end

  -- Reasons to rest.
  local hp,mhp = you.hp()
  local mp,mmp = you.mp()
  if hp < mhp or mp < mmp then
    do_rest()
    return true
  end

  return false
end

function relax()
  local relax_strategy = {
    eat_chunk,
    butcher_corpse,
    pickup_meat,
    find_nearby_corpse,
    eat_permafood}

  -- Reasons not to relax.
  if danger() then
    return false
  end

  local n = 1
  local success = false
  while not success do
    if not relax_strategy[n] then
      return false
    end
    success = relax_strategy[n]()
    n = n + 1
  end
  return success
end

function do_eat_chunk()
  do_it("ee")
end

function eat_chunk()
  if have_chunk() and can_eat_chunk()) then
    do_eat_chunk()
    return true
  end
  return false
end

function butcher_corpse()
  local corpse_count = 0
  for item in at_feet() do
    -- We can't use item.class because skeletons have class corpse.
    -- It's really fucking dumb.
    if string.find(item.name(), "corpse") then
      corpse_count = corpse_count + 1
    end
  end

  if corpse_count == 1 then
    do_it("c")
    return true
  elseif corpse_count > 1 then
    do_it("ccq")
    return true
  end
  return false
end

function pickup_meat()
  local item_count = 0
  local found_food = false
  for item in at_feet() do
    if item.class(true) == "food" then
      found_food = true
    end
    item_count = item_count + 1
  end

  if not found_food then
    return false
  end

  if item_count == 1 then
    do_it(",")
    return true
  elseif item_count > 1 then
    do_it(",,\r")
    return true
  end
  return false
end

function find_nearby_corpse()
  -- We just butcher everything indiscriminately because it's simple.
  -- The final \r is needed because it makes sure ready() is called again???
  return try_it(control('f') .. "corpse&&!!skel" .. "\ra\r\r")
end

function do_eat_permafood()
  for item in inventory() do
    if item.class(true) == "food" and
       food.edible(item) and
       not food.ischunk(item) then
      say("NOTICE: Eating permafood: " .. item.name())
      items.swap_slots(item.slot, items.letter_to_index("e"), false)
      do_it("ee")
      return
    end
  end
end

function eat_permafood()
  if have_permafood() and need_to_eat() then
    do_eat_permafood()
    return true
  end
  return false
end

function explore()
  -- The \r is needed because it makes sure ready() is called again???
  return try_it("o\r")
end

function progress()
  return false
end

function fight()
  local fight_strategy = {
    whack,
    wait}

  -- Nothing to fight...
  if not danger() then
    return false
  end

  local n = 1
  local success = false
  while not success do
    if not fight_strategy[n] then
      say("ERROR: Unable to fight for some reason.")
      return false
    end
    success = fight_strategy[n]()
    n = n + 1
  end
  return success
end

function whack()
  for x = -1, 1 do
    for y = -1, 1 do
      if monster_array[x][y] then
         do_it(dtovi(x, y))
         return true
      end
    end
  end

  return false
end

function wait()
  do_it("s")
  return true
end

function emergency()
  -- These three situations are hardcoded to block autoexplore.
  -- "You need to eat something NOW!"
  -- "Calm down first, please."
  -- "No exploration algorithm can help you here."
  -- Because of that we need to solve them in order to keep playing
  -- the game in a sensible fashionl.

  local emergency_strategy = {
    emergency_starvation,
    emergency_berserk,
    emergency_labyrinth}

  -- We're not going to actually implement this ever because it's
  -- fucking stupid as hell. The resting segment will rest off
  -- berserking. The relaxing segment will eat. As for labyrinths
  -- I have no fucking clue how you got in a labyrinth lmao.
  -- Still keeping this around as a reminder just in case.
  return false
end

---------------
-- SECTION C --
---------------

local LOS = 7

local current_turn

-- cb takes action, spending one or more turns.
-- Hopefully this brings us closer to victory!


local cb = coroutine.create(win)

-- hit_closest is run when you press tab.
local first_time = true

function hit_closest()
  if(not first_time) then
    if(coroutine.status(cb) == "dead") then
      cb = coroutine.create(win)
      coroutine.resume(cb)
    end
  else
    coroutine.resume(cb)
    first_time = false
  end
end

-- ready is run when crawl is ready for user input.
function ready()
  current_turn = you.turns()
  if(not first_time and coroutine.status(cb) == "suspended") then
    coroutine.resume(cb)
  end
end

-- choose_stat_gain is run on level ups that cause stat gain.
function choose_stat_gain()
  return "s"
end

---------------
-- SECTION D --
---------------

function autopickup(it, name)
  return false
end
clear_autopickup_funcs()
add_autopickup_func(autopickup)

---------------
-- SECTION E --
---------------

function do_it(command)
  local old_turn = you.turns()
  crawl.process_keys(command)
  -- We yield, waiting for us to be ready to accept input again.
  -- When we're ready again, the current_turn may be different.
  coroutine.yield()
  if(current_turn == old_turn) then
    say("ERROR: The action \"" .. command .. "\" failed unexpectedly.")
  end
end

function try_it(command)
  local old_turn = you.turns()
  crawl.process_keys(command)
  -- We yield, waiting for us to be ready to accept input again.
  -- When we're ready again, the current_turn may be different.
  coroutine.yield()
  if(current_turn == old_turn) then
    return false
  end
  return true
end

function say(x)
  crawl.mpr(x)
  crawl.take_note(x)
end

function control(c)
  return string.char(string.byte(c) - string.byte('a') + 1)
end

function initialize_monster_array()
  if not monster_array_init then
    monster_array = {}
    local x
    for x = -LOS,LOS do
      monster_array[x] = {}
    end
    monster_array_init = true
  end
end

function update_monster_array()
  initialize_monster_array()

  local x,y
  for x = -LOS,LOS do
    for y = -LOS,LOS do
      monster_array[x][y] = monster.get_monster_at(x, y)
    end
  end
end

function danger()
  local danger = false

  for x = -LOS,LOS do
    for y = -LOS,LOS do
      if monster_array[x][y] then
        danger = true
      end
    end
  end

  return danger
end

function dtovi(x, y)
  local d2v = {[-1] = { [-1] = 'y', [0] = 'k', [1] = 'u'},
               [0]  = { [-1] = 'h',            [1] = 'l'},
               [1]  = { [-1] = 'b', [0] = 'j', [1] = 'n'}}

  return d2v[y][x]
end

function inventory()
  return iter.invent_iterator:new(items.inventory())
end

function at_feet()
  return iter.invent_iterator:new(you.floor_items())
end

function have_permafood()
  for item in inventory() do
    if item.class(true) == "food" and
       food.edible(item) and
       not food.ischunk(item) then
      return true
    end
  end
  return false
end

function have_chunk()
  for item in inventory() do
    if item.class(true) == "food" and
       food.edible(item) and
       food.ischunk(item) then
      return true
    end
  end
  return false
end

function can_eat_chunk()
  if you.hunger_name() ~= "completely stuffed" then
    return true
  end
end

function need_to_eat()
  if you.hunger_name() == "starving" or
     you.hunger_name() == "near starving" or
     you.hunger_name() == "near starving" then
    return true
  end
  return false
end

}
